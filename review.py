# -*- coding: utf-8 -*-
"""review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3WhZRT3rkTMfX5ilqVOX9dQyjKN_NvF

# Natural Language Processing

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset=pd.read_csv('Restaurant_Reviews.tsv',delimiter='\t',quoting=3)

"""## Cleaning the texts"""

import re,nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus=[]
for i in range(0, 1000):
  review=re.sub('[^a-zA-Z]',' ',dataset['Review'][i])
  review=review.lower()
  review=review.split()
  ps=PorterStemmer()
  all_stopwords=stopwords.words('english')
  all_stopwords.remove('not')
  review=[ps.stem(word) for word in review if not word in set(all_stopwords)]
  review=' '.join(review)
  corpus.append(review)

"""## Creating the Bag of Words model"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features = 1500)
X=cv.fit_transform(corpus).toarray()
y=dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20)

"""## Training the Naive Bayes model on the Training set"""

from sklearn.naive_bayes import GaussianNB
ob=GaussianNB()
ob.fit(X_train,y_train)

"""## Predicting the Test set results"""

y_pred=ob.predict(X_test)
np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1)

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test,y_pred)

#new_review='I love this restaurant so much'
new_review=input('Enter your restaurant review:')
new_review=re.sub('[^a-zA-Z]', ' ', new_review)
new_review=new_review.lower()
new_review=new_review.split()
ps=PorterStemmer()
all_stopwords=stopwords.words('english')
all_stopwords.remove('not')
new_review=[ps.stem(word) for word in new_review if not word in set(all_stopwords)]
new_review=' '.join(new_review)
new_corpus=[new_review]
new_X_test=cv.transform(new_corpus).toarray()
new_y_pred=ob.predict(new_X_test)
if new_y_pred==1:
  print('It is a positive review')
else:
  print('It is a negative review')